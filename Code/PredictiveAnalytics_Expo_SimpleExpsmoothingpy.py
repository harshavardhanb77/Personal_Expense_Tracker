# Import necessary libraries
import pandas as pd
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.holtwinters import SimpleExpSmoothing, ExponentialSmoothing
import matplotlib.pyplot as plt

# Load the dataset from the specified file path
file_path = '/content/enhanced_personal_expense_data.csv'
df = pd.read_csv(file_path)

# Convert the "Date" column to datetime format for easy date-based manipulation
df['Date'] = pd.to_datetime(df['Date'])

# Set "Date" as the index of the DataFrame to facilitate time series operations
# Aggregate data by month, summing up the "Amount" for each month
df.set_index('Date', inplace=True)
monthly_data = df['Amount'].resample('M').sum()

# Plot the monthly aggregated amount to visualize the overall trend
plt.figure(figsize=(10, 5))
plt.plot(monthly_data, marker='o')
plt.title('Monthly Aggregated Amount')
plt.xlabel('Date')
plt.ylabel('Total Amount')
plt.show()

### Simple Exponential Smoothing
# Apply Simple Exponential Smoothing to the monthly data
# This model is useful for time series without clear seasonality or trend
simple_exp_model = SimpleExpSmoothing(monthly_data).fit()
simple_exp_forecast = simple_exp_model.forecast(steps=12)  # Forecast for the next 12 months

# Plot the forecast generated by Simple Exponential Smoothing
plt.figure(figsize=(10, 5))
plt.plot(monthly_data, label='Historical Data')
plt.plot(simple_exp_forecast, label='Simple Exponential Smoothing Forecast', color='orange')
plt.title('Simple Exponential Smoothing Forecast for Monthly Spending')
plt.xlabel('Date')
plt.ylabel('Amount')
plt.legend()
plt.show()

### Exponential Smoothing (Holt-Winters)
# Use Holt-Winters Exponential Smoothing, which allows for both trend and seasonality
# Specify 'additive' trend and seasonality components and set a seasonal period of 12 (for monthly data)
exp_smoothing_model = ExponentialSmoothing(monthly_data, trend="add", seasonal="add", seasonal_periods=12).fit()
exp_smoothing_forecast = exp_smoothing_model.forecast(steps=12)  # Forecast for the next 12 months

# Plot the forecast from Exponential Smoothing with trend and seasonality components
plt.figure(figsize=(10, 5))
plt.plot(monthly_data, label='Historical Data')
plt.plot(exp_smoothing_forecast, label='Exponential Smoothing Forecast', color='green')
plt.title('Exponential Smoothing (Holt-Winters) Forecast for Monthly Spending')
plt.xlabel('Date')
plt.ylabel('Amount')
plt.legend()
plt.show()

### ARIMA Model
# Fit an ARIMA model to the monthly data, specifying (1, 1, 1) as initial parameters
# (p, d, q) = (1, 1, 1) indicates a simple ARIMA model with 1 autoregressive term, differencing of 1, and 1 moving average term
arima_model = ARIMA(monthly_data, order=(1, 1, 1)).fit()
arima_forecast = arima_model.forecast(steps=12)  # Forecast for the next 12 months

# Plot the forecast generated by the ARIMA model
plt.figure(figsize=(10, 5))
plt.plot(monthly_data, label='Historical Data')
plt.plot(arima_forecast, label='ARIMA Forecast', color='red')
plt.title('ARIMA Forecast for Monthly Spending')
plt.xlabel('Date')
plt.ylabel('Amount')
plt.legend()
plt.show()

# Print the model summaries for each forecasting method to review model parameters and performance
print("Simple Exponential Smoothing Summary:")
print(simple_exp_model.summary())
print("\nExponential Smoothing (Holt-Winters) Summary:")
print(exp_smoothing_model.summary())
print("\nARIMA Model Summary:")
print(arima_model.summary())
